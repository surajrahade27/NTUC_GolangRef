// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	entities "campaign-mgmt/app/domain/entities"
	dto "campaign-mgmt/app/usecases/dto"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// CampaignUseCases is an autogenerated mock type for the CampaignUseCases type
type CampaignUseCases struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, campaignData
func (_m *CampaignUseCases) Create(ctx context.Context, campaignData entities.Campaign) (*dto.CampaignDTO, error) {
	ret := _m.Called(ctx, campaignData)

	var r0 *dto.CampaignDTO
	if rf, ok := ret.Get(0).(func(context.Context, entities.Campaign) *dto.CampaignDTO); ok {
		r0 = rf(ctx, campaignData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.CampaignDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entities.Campaign) error); ok {
		r1 = rf(ctx, campaignData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Exists provides a mock function with given fields: ctx, campaignID, title
func (_m *CampaignUseCases) Exists(ctx context.Context, campaignID int64, title string) (bool, error) {
	ret := _m.Called(ctx, campaignID, title)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) bool); ok {
		r0 = rf(ctx, campaignID, title)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = rf(ctx, campaignID, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, campaignID
func (_m *CampaignUseCases) Get(ctx context.Context, campaignID int64) (*dto.CampaignDTO, error) {
	ret := _m.Called(ctx, campaignID)

	var r0 *dto.CampaignDTO
	if rf, ok := ret.Get(0).(func(context.Context, int64) *dto.CampaignDTO); ok {
		r0 = rf(ctx, campaignID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.CampaignDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, campaignID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetList provides a mock function with given fields: ctx, paginationData
func (_m *CampaignUseCases) GetList(ctx context.Context, paginationData entities.PaginationConfig) (*dto.CampaignListResponse, error) {
	ret := _m.Called(ctx, paginationData)

	var r0 *dto.CampaignListResponse
	if rf, ok := ret.Get(0).(func(context.Context, entities.PaginationConfig) *dto.CampaignListResponse); ok {
		r0 = rf(ctx, paginationData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.CampaignListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entities.PaginationConfig) error); ok {
		r1 = rf(ctx, paginationData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, campaignData
func (_m *CampaignUseCases) Update(ctx context.Context, campaignData entities.Campaign) error {
	ret := _m.Called(ctx, campaignData)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.Campaign) error); ok {
		r0 = rf(ctx, campaignData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStatus provides a mock function with given fields: ctx
func (_m *CampaignUseCases) UpdateStatus(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCampaignUseCases interface {
	mock.TestingT
	Cleanup(func())
}

// NewCampaignUseCases creates a new instance of CampaignUseCases. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCampaignUseCases(t mockConstructorTestingTNewCampaignUseCases) *CampaignUseCases {
	mock := &CampaignUseCases{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
