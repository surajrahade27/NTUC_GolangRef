// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	entities "campaign-mgmt/app/domain/entities"
	context "context"

	mock "github.com/stretchr/testify/mock"

	valueobjects "campaign-mgmt/app/domain/valueobjects"
)

// CampaignProducts is an autogenerated mock type for the CampaignProducts type
type CampaignProducts struct {
	mock.Mock
}

// CreateMultiple provides a mock function with given fields: ctx, products
func (_m *CampaignProducts) CreateMultiple(ctx context.Context, products []entities.CampaignProduct) ([]entities.CampaignProduct, error) {
	ret := _m.Called(ctx, products)

	var r0 []entities.CampaignProduct
	if rf, ok := ret.Get(0).(func(context.Context, []entities.CampaignProduct) []entities.CampaignProduct); ok {
		r0 = rf(ctx, products)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.CampaignProduct)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []entities.CampaignProduct) error); ok {
		r1 = rf(ctx, products)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAllByCampaignId provides a mock function with given fields: ctx, campaignID
func (_m *CampaignProducts) DeleteAllByCampaignId(ctx context.Context, campaignID int64) error {
	ret := _m.Called(ctx, campaignID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, campaignID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByCampaignId provides a mock function with given fields: ctx, campaignID, productID
func (_m *CampaignProducts) DeleteByCampaignId(ctx context.Context, campaignID int64, productID int64) error {
	ret := _m.Called(ctx, campaignID, productID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, campaignID, productID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByCampaignId provides a mock function with given fields: ctx, CampaignID
func (_m *CampaignProducts) GetByCampaignId(ctx context.Context, CampaignID valueobjects.CampaignID) ([]entities.CampaignProduct, error) {
	ret := _m.Called(ctx, CampaignID)

	var r0 []entities.CampaignProduct
	if rf, ok := ret.Get(0).(func(context.Context, valueobjects.CampaignID) []entities.CampaignProduct); ok {
		r0 = rf(ctx, CampaignID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.CampaignProduct)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, valueobjects.CampaignID) error); ok {
		r1 = rf(ctx, CampaignID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, product
func (_m *CampaignProducts) Update(ctx context.Context, product entities.CampaignProduct) error {
	ret := _m.Called(ctx, product)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.CampaignProduct) error); ok {
		r0 = rf(ctx, product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCampaignProducts interface {
	mock.TestingT
	Cleanup(func())
}

// NewCampaignProducts creates a new instance of CampaignProducts. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCampaignProducts(t mockConstructorTestingTNewCampaignProducts) *CampaignProducts {
	mock := &CampaignProducts{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
