// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	entities "campaign-mgmt/app/domain/entities"
	context "context"

	mock "github.com/stretchr/testify/mock"

	valueobjects "campaign-mgmt/app/domain/valueobjects"
)

// Campaigns is an autogenerated mock type for the Campaigns type
type Campaigns struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, campaignDetails
func (_m *Campaigns) Create(ctx context.Context, campaignDetails entities.Campaign) (entities.Campaign, error) {
	ret := _m.Called(ctx, campaignDetails)

	var r0 entities.Campaign
	if rf, ok := ret.Get(0).(func(context.Context, entities.Campaign) entities.Campaign); ok {
		r0 = rf(ctx, campaignDetails)
	} else {
		r0 = ret.Get(0).(entities.Campaign)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entities.Campaign) error); ok {
		r1 = rf(ctx, campaignDetails)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Exists provides a mock function with given fields: ctx, campaignID, title
func (_m *Campaigns) Exists(ctx context.Context, campaignID valueobjects.CampaignID, title string) (bool, error) {
	ret := _m.Called(ctx, campaignID, title)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, valueobjects.CampaignID, string) bool); ok {
		r0 = rf(ctx, campaignID, title)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, valueobjects.CampaignID, string) error); ok {
		r1 = rf(ctx, campaignID, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, campaignID
func (_m *Campaigns) Get(ctx context.Context, campaignID valueobjects.CampaignID) (entities.Campaign, error) {
	ret := _m.Called(ctx, campaignID)

	var r0 entities.Campaign
	if rf, ok := ret.Get(0).(func(context.Context, valueobjects.CampaignID) entities.Campaign); ok {
		r0 = rf(ctx, campaignID)
	} else {
		r0 = ret.Get(0).(entities.Campaign)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, valueobjects.CampaignID) error); ok {
		r1 = rf(ctx, campaignID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetList provides a mock function with given fields: ctx, paginationDetails
func (_m *Campaigns) GetList(ctx context.Context, paginationDetails entities.PaginationConfig) ([]entities.Campaign, int64, error) {
	ret := _m.Called(ctx, paginationDetails)

	var r0 []entities.Campaign
	if rf, ok := ret.Get(0).(func(context.Context, entities.PaginationConfig) []entities.Campaign); ok {
		r0 = rf(ctx, paginationDetails)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Campaign)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(context.Context, entities.PaginationConfig) int64); ok {
		r1 = rf(ctx, paginationDetails)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, entities.PaginationConfig) error); ok {
		r2 = rf(ctx, paginationDetails)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: ctx, campaignDetails
func (_m *Campaigns) Update(ctx context.Context, campaignDetails entities.Campaign) error {
	ret := _m.Called(ctx, campaignDetails)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.Campaign) error); ok {
		r0 = rf(ctx, campaignDetails)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStatus provides a mock function with given fields: ctx
func (_m *Campaigns) UpdateStatus(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCampaigns interface {
	mock.TestingT
	Cleanup(func())
}

// NewCampaigns creates a new instance of Campaigns. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCampaigns(t mockConstructorTestingTNewCampaigns) *Campaigns {
	mock := &Campaigns{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
