// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	entities "campaign-mgmt/app/domain/entities"
	context "context"

	mock "github.com/stretchr/testify/mock"

	valueobjects "campaign-mgmt/app/domain/valueobjects"
)

// CampaignStores is an autogenerated mock type for the CampaignStores type
type CampaignStores struct {
	mock.Mock
}

// CreateMultiple provides a mock function with given fields: ctx, stores
func (_m *CampaignStores) CreateMultiple(ctx context.Context, stores []entities.CampaignStore) ([]entities.CampaignStore, error) {
	ret := _m.Called(ctx, stores)

	var r0 []entities.CampaignStore
	if rf, ok := ret.Get(0).(func(context.Context, []entities.CampaignStore) []entities.CampaignStore); ok {
		r0 = rf(ctx, stores)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.CampaignStore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []entities.CampaignStore) error); ok {
		r1 = rf(ctx, stores)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, campaignID, campaignStoreID, userID
func (_m *CampaignStores) Delete(ctx context.Context, campaignID valueobjects.CampaignID, campaignStoreID valueobjects.CampaignStoreID, userID int64) error {
	ret := _m.Called(ctx, campaignID, campaignStoreID, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, valueobjects.CampaignID, valueobjects.CampaignStoreID, int64) error); ok {
		r0 = rf(ctx, campaignID, campaignStoreID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByCampaignID provides a mock function with given fields: ctx, campaignID, userID
func (_m *CampaignStores) DeleteByCampaignID(ctx context.Context, campaignID valueobjects.CampaignID, userID int64) error {
	ret := _m.Called(ctx, campaignID, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, valueobjects.CampaignID, int64) error); ok {
		r0 = rf(ctx, campaignID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByStoreID provides a mock function with given fields: ctx, campaignID, storeID, userID
func (_m *CampaignStores) DeleteByStoreID(ctx context.Context, campaignID valueobjects.CampaignID, storeID int64, userID int64) error {
	ret := _m.Called(ctx, campaignID, storeID, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, valueobjects.CampaignID, int64, int64) error); ok {
		r0 = rf(ctx, campaignID, storeID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByCampaignId provides a mock function with given fields: ctx, campaignID
func (_m *CampaignStores) GetByCampaignId(ctx context.Context, campaignID valueobjects.CampaignID) ([]entities.CampaignStore, error) {
	ret := _m.Called(ctx, campaignID)

	var r0 []entities.CampaignStore
	if rf, ok := ret.Get(0).(func(context.Context, valueobjects.CampaignID) []entities.CampaignStore); ok {
		r0 = rf(ctx, campaignID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.CampaignStore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, valueobjects.CampaignID) error); ok {
		r1 = rf(ctx, campaignID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByStoreID provides a mock function with given fields: ctx, campaignID, storeID
func (_m *CampaignStores) GetByStoreID(ctx context.Context, campaignID valueobjects.CampaignID, storeID int64) (entities.CampaignStore, error) {
	ret := _m.Called(ctx, campaignID, storeID)

	var r0 entities.CampaignStore
	if rf, ok := ret.Get(0).(func(context.Context, valueobjects.CampaignID, int64) entities.CampaignStore); ok {
		r0 = rf(ctx, campaignID, storeID)
	} else {
		r0 = ret.Get(0).(entities.CampaignStore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, valueobjects.CampaignID, int64) error); ok {
		r1 = rf(ctx, campaignID, storeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, store
func (_m *CampaignStores) Update(ctx context.Context, store entities.CampaignStore) error {
	ret := _m.Called(ctx, store)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.CampaignStore) error); ok {
		r0 = rf(ctx, store)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCampaignStores interface {
	mock.TestingT
	Cleanup(func())
}

// NewCampaignStores creates a new instance of CampaignStores. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCampaignStores(t mockConstructorTestingTNewCampaignStores) *CampaignStores {
	mock := &CampaignStores{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
